
------------------------------------------------
-- LOBS
------------------------------------------------

-- CLOB (TEXTO)

-- BLOBS (BINARY - FOTO - VIDEO)

-- BFILES (FUERA DE LA BASE DE DATOS) (APUNTAN A FICHEROS)


-- LOBS INTERNOS CLOB Y BLOB (GUARDAN LOS VALORES DENTRO DE LA BASE DE DATOS)

-- LOBS EXTERNOS BFILE (GUARDAN LOS VALORES EN FICHEROS EXTERNOS)



-- CREACIÓN DE COLUMNAS TIPO LOB
CREATE TABLE PRU_LOB
(
  CODIGO NUMBER,
  NOMBRE VARCHAR2(100),
  DATOS CLOB
);

DESC PRU_LOB;

-- SIRVE PARA ALMACENAR GRANDES CANTIDADES DE TEXTO
INSERT INTO PRU_LOB VALUES (1,'JORGE','FKSFDSLJFLKDSJKLDJFSKLFJSKLJFKLSJFKLSDJKLFJDSKJFKLSDJFKLSDJKLFJSDKLJFKLDSJFKLDSJKFJDSKJFDSKLJDKLSJ DFSDFSDFSDDFFDS');

SELECT * FROM PRU_LOB;


ALTER TABLE PRU_LOB ADD (FOTO BLOB);

DESC PRU_LOB;

-- EMPTY_CLOB()
-- EMPTY_BLOB()

-- CREA UN VALOR VACÍO COMO CONTENIDO PERO CON UN PUNTERO
INSERT INTO PRU_LOB VALUES (2,'LISSETTE',EMPTY_CLOB(),EMPTY_BLOB());

SELECT * FROM PRU_LOB;

-- DBMS_LOB

DESC DBMS_LOB;

-- CREACIÓN DEL OBJETO DIRECTORY

-- DEBO TENER PERMISOS
-- DESDE UN USUARIO CON MÁS PRIVILEGIOS
GRANT CREATE ANY DIRECTORY TO CURSO_PLSQL;

GRANT READ, WRITE ON DIRECTORY FICHERO TO CURSO_PLSQL;


CREATE OR REPLACE DIRECTORY FICHEROS
AS 'C:\Users\jorge\Escritorio\PLSQL\IMG';

-- VER LOS DIRECTORIOS CREADOS
SELECT * FROM ALL_DIRECTORIES;


-- CARGAR UN BFILE

CREATE TABLE IMAGENES
(
    CODIGO NUMBER,
    FOTO BFILE
);

SELECT * FROM IMAGENES;

DESC IMAGENES;

DECLARE
    FOTO BFILE;
BEGIN
    -- FUNCIÓN QUE NOS PERMITE CARGAR UN FICHERO DENTRO DE UN BFILE
    FOTO := BFILENAME('FICHEROS','5.gif');
    INSERT INTO IMAGENES VALUES (1, FOTO);
END;
/

INSERT INTO IMAGENES VALUES (1, BFILENAME('FICHEROS','1.png'));


SELECT * FROM IMAGENES;


-- EJERCICIO PRÁCTICO DE BFILE

CREATE TABLE CLIENTES
(
CODIGO NUMBER,
NOMBRE VARCHAR2(100),
FOTO BFILE,
LONGITUD NUMBER);

/

INSERT INTO CLIENTES VALUES ( 1,'ROSA',NULL,NULL);

INSERT INTO CLIENTES VALUES (2,'PEDRO',NULL,NULL); 

INSERT INTO CLIENTES VALUES ( 3,'ANTONIO',NULL,NULL); 

INSERT INTO CLIENTES VALUES ( 4,'RAUL',NULL,NULL); 

INSERT INTO CLIENTES VALUES ( 5,'MARIA',NULL,NULL);

/


-- FUNCIÓN QUE RETORNA EL PESO DE LA FOTO
CREATE OR REPLACE FUNCTION TAM (DIRECTORIO VARCHAR2, CODIGO NUMBER)
RETURN NUMBER
IS
    FICHERO VARCHAR2(100);
    FOTO BFILE;
BEGIN
    FICHERO:='cliente'||CODIGO||'.png';
    FOTO:=BFILENAME(DIRECTORIO,FICHERO);
    IF DBMS_LOB.FILEEXISTS(FOTO)=1 THEN
        RETURN DBMS_LOB.GETLENGTH(FOTO);
    ELSE
        RETURN 0;
    END IF;
END;
/

SET SERVEROUTPUT ON
EXECUTE DBMS_OUTPUT.PUT_LINE(TAM('FICHEROS',1));


SELECT * FROM CLIENTES;


CREATE OR REPLACE PROCEDURE SP_CARGA_CLIENTES IS 
    CURSOR C1 IS SELECT * FROM CLIENTES FOR UPDATE;
    FICHERO VARCHAR2(100);
BEGIN
    FOR X IN C1
    LOOP
        FICHERO := 'cliente'||x.codigo||'.png';
        UPDATE CLIENTES SET FOTO = BFILENAME('FICHEROS',FICHERO),LONGITUD = TAM('FICHEROS',X.CODIGO)
        WHERE CURRENT OF C1;
    END LOOP;
END;
/

EXECUTE SP_CARGA_CLIENTES();


SELECT * FROM CLIENTES;
    
    
-- SUBIMOS UN ARCHIVO DE TEXTO

ALTER TABLE CLIENTES ADD COMENTARIOS BLOB DEFAULT EMPTY_BLOB();
/
DESC CLIENTES
/
select * from clientes;
/

CREATE OR REPLACE PROCEDURE CARGA_COMENTARIOS
IS
    CURSOR CLI IS SELECT * FROM CLIENTES FOR UPDATE;
    FICHERO VARCHAR2(100);
    COMENTARIOS BFILE;
    TEMPORAL BLOB;
BEGIN
    FOR C1 IN CLI LOOP 
        --NOMBRE DEL FICHERO
        FICHERO:='comentario'||C1.CODIGO||'.txt';
        
        --ASOCIAR EL FICHERO AL BFILE
        COMENTARIOS:=BFILENAME('FICHEROS',FICHERO);
        
        --ABRIR EL FICHERO. ES OBLIGATORIO SI QUEREMOS USAR LOADFROMMFILE
        DBMS_LOB.OPEN(COMENTARIOS,DBMS_LOB.LOB_READONLY);
        
        --ES NECESARIO CREAR UN LOB TEMPORAL, PARA INICIALIZAR EL LOCALIZARO
        DBMS_LOB.CREATETEMPORARY(TEMPORAL,TRUE);
        
        -- CARGAMOS EL FICHERO A LA VARIABLE TEMPORAL 
        DBMS_LOB.LOADFROMFILE(TEMPORAL,COMENTARIOS,DBMS_LOB.GETLENGTH(COMENTARIOS));
        
        --MODIFICAMOS LA COLUMNA DE LA TABLA
        UPDATE CLIENTES SET COMENTARIOS=TEMPORAL WHERE CURRENT OF CLI;
        
        --CERRAMOS EL FICHERO
        DBMS_LOB.CLOSE(COMENTARIOS);
    END LOOP;
END;
/

EXECUTE CARGA_COMENTARIOS;

SELECT * FROM CLIENTES;

-- DBMS_LOAD.READ leer LOBS

ALTER TABLE CLIENTES ADD DESCRIPCION CLOB;
/
DESC CLIENTES;
/
SELECT * FROM CLIENTES;
/
DECLARE
    TEXTO VARCHAR2(50):='DESCRIPCION DEL CLIENTE:';
BEGIN
    FOR X IN 1..5 LOOP
        UPDATE  CLIENTES SET DESCRIPCION=TEXTO||X WHERE CODIGO=X;
    END LOOP;
END;
/

CREATE TABLE PRUEBA_LOB (DESCRI CLOB);

DESC PRUEBA_LOB;

CREATE OR REPLACE PROCEDURE CARGA_DESCRI
IS
    CURSOR CLI IS SELECT * FROM CLIENTES FOR UPDATE;
    TEMPORAL CLOB; 
    CANTIDAD INTEGER:=10;
    POSICION INTEGER:=15;
BEGIN
    FOR C1 IN CLI LOOP 
        --ABRIR EL FICHERO. ES OBLIGATORIO 
        DBMS_LOB.OPEN(C1.DESCRIPCION,DBMS_LOB.LOB_READONLY);
        
       --LEEMOS 5 POSICIONES DE NUESTRO CAMPO DESCRIPCION Y LO DEJAMOS EN LA VARIABLE TEMPORAL
        DBMS_LOB.READ(C1.DESCRIPCION,CANTIDAD,POSICION,TEMPORAL);
        
        INSERT INTO PRUEBA_LOB VALUES(TEMPORAL);
        
       --CERRAR EL LOB
        DBMS_LOB.CLOSE(C1.DESCRIPCION);
    END LOOP;
END;
/

EXECUTE CARGA_DESCRI;

SELECT * FROM PRUEBA_LOB;

SELECT * FROM CLIENTES;

---------------------------------
-- ESCRIBIR LOBS
---------------------------------


CREATE TABLE PRUEBA_LOB1 (EMPLEADO CLOB);
/

CREATE OR REPLACE PROCEDURE CARGA_EMPLE
IS
    CURSOR CLI IS SELECT * FROM EMPLOYEES;
    TEMPORAL CLOB; 
    CANTIDAD INTEGER;
    NOMBRE VARCHAR2(100);
BEGIN
    FOR C1 IN CLI LOOP 
        
        --ES NECESARIO CREAR UN LOB TEMPORAL, PARA INICIALIZAR EL LOCALIZADOR
        DBMS_LOB.CREATETEMPORARY(TEMPORAL,TRUE);
        
        --ABRIR EL LOB, EN MODO ESCCRITURA
        DBMS_LOB.OPEN(TEMPORAL,  DBMS_LOB.LOB_READWRITE);    
           
       --VARIABLE FORMADA POR EL NOMBRE Y APELLIDO DEL EMPLEADO
        NOMBRE:=C1.FIRST_NAME||' '|| C1.LAST_NAME;
        
        --VARIALBE CON LA LONGITUD DLE NOMBRE
        CANTIDAD:=LENGTH(NOMBRE);
        
        --ESCRIBIMOS EN LA VARIABLE LOB LOS DATOS
        DBMS_LOB.WRITE(TEMPORAL,CANTIDAD,1,NOMBRE);
        
       -- INSERTAMOS EN LA TABLA
        INSERT INTO PRUEBA_LOB1 VALUES(TEMPORAL);
        
        --CERRAMOS EL FICHEROS       
        DBMS_LOB.CLOSE(TEMPORAL);
    END LOOP;
END;
/

EXECUTE CARGA_EMPLE;

SELECT * FROM PRUEBA_LOB1;


------------------------------------------------------------------
-- FUNCIONES DBMS_LOB
------------------------------------------------------------------

SELECT * FROM CLIENTES;

SELECT DESCRIPCION, DBMS_LOB.SUBSTR(DESCRIPCION,10,1) AS TEXTO FROM CLIENTES;

SELECT DESCRIPCION, DBMS_LOB.INSTR(DESCRIPCION,'1') FROM CLIENTES;

SELECT DBMS_LOB.SUBSTR(FOTO,10,1) AS TEXTO FROM CLIENTES;


-----------------------------------------------------------------------------
-- EXCEPCIÓN PARA DBMS_LOB
-----------------------------------------------------------------------------

DECLARE
  FOTO BFILE;
BEGIN
  FOTO:=BFILENAME('F','gatito1.jpg');
  DBMS_LOB.OPEN(FOTO,DBMS_LOB.LOB_READONLY);
EXCEPTION
  WHEN DBMS_LOB.NOEXIST_DIRECTORY THEN
        RAISE_APPLICATION_ERROR(-20000,'EL DIRECTORIO NO EXISTE');
END;
/


-------------------------------------------------------------------------------
-- PROCESO DE ACTUALIZACIÓN DE FOTOS
-------------------------------------------------------------------------------

ALTER TABLE MONA_XINA ADD FOTO BLOB DEFAULT EMPTY_BLOB();

DECLARE
    -- Variables para almacenar y cargar las fotos
    v_blob BLOB;
    
    v_bfile BFILE;
    -- Identificación de la foto
    v_nombre VARCHAR2(100);
    -- Directorio donde se encuentra
    v_directorio VARCHAR2(80);
    
    -- Cursor que recorre las fotos de los Clientes
    CURSOR cur_fotos IS 
    SELECT id_mona, foto FROM MONA_XINA 
    FOR UPDATE OF foto;

BEGIN 
    -- Recorrer el cursor y almacenar las fotos
    FOR X IN cur_fotos 
    LOOP
        BEGIN 
        
            --Directorio y nombre del archivo
            v_directorio := 'FICHEROS';
            v_nombre := X.id_mona || '.jpg';
            v_blob :=  X.foto;
            
            -- Proceso de actualización de fotos
            v_bfile := bfilename(v_directorio, v_nombre);
            
            -- blob, bfile
            dbms_lob.OPEN(v_bfile, dbms_lob.lob_readonly);
            dbms_lob.loadfromfile(v_blob, v_bfile, dbms_lob.getlength(v_bfile));
            dbms_lob.CLOSE(v_bfile);
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;
    END LOOP;
END;
/
SELECT * FROM MONA_XINA;