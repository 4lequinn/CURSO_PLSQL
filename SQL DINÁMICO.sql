

--------------------------------------------------
-- SQL DINÁMICO
--------------------------------------------------

-- EXECUTE IMMEDIATE cadena


CREATE OR REPLACE PROCEDURE SP_CREAR_TABLA (NOMBRE_TABLA VARCHAR2, COLUMNAS VARCHAR2)
AUTHID CURRENT_USER -- DEFINER 
IS
    COMANDO varchar2(100);
BEGIN
    COMANDO :=  'CREATE TABLE ' || NOMBRE_TABLA || '('||COLUMNAS||')';
    EXECUTE IMMEDIATE COMANDO;
END SP_CREAR_TABLA;
/


BEGIN
    SP_CREAR_TABLA('TB_D', 'CODIGO NUMBER, DATOS VARCHAR2(100)');
END;
/


   
CREATE OR REPLACE function EJEMPLO_DML 
RETURN NUMBER
AUTHID CURRENT_USER --DEFINER
IS
   COMANDO VARCHAR2(100);
   FILAS NUMBER;
BEGIN
   COMANDO:='DELETE FROM PRU1';
   DBMS_OUTPUT.PUT_LINE(COMANDO);
   EXECUTE IMMEDIATE COMANDO;
   FILAS:=SQL%ROWCOUNT;
   RETURN FILAS;
END;
/

BEGIN
      DBMS_OUTPUT.PUT_LINE('SE HAN BORRADO ' ||EJEMPLO_DML||' FILAS');

END;
/


-- CONDICIONES CON SQL DINÁMICO
CREATE OR REPLACE FUNCTION EJEMPLO_DML(CONDICION VARCHAR2)
RETURN NUMBER
AUTHID CURRENT_USER
IS
    COMANDO VARCHAR2(100);
    FILAS NUMBER;
BEGIN
    COMANDO:='DELETE FROM PRU1 WHERE '||CONDICION;
    DBMS_OUTPUT.PUT_LINE(COMANDO);
    EXECUTE IMMEDIATE(COMANDO);
    FILAS:=SQL%ROWCOUNT;
    RETURN FILAS;
END;
/

DECLARE
   CONDICION VARCHAR2(100);
   NUM_FILAS NUMBER;
BEGIN
    CONDICION:='CODIGO=1';
    NUM_FILAS:=EJEMPLO_DML(CONDICION);
    DBMS_OUTPUT.PUT_LINE('SE HAN BORRADO '||NUM_FILAS||' FILAS');
END;
/



-- CLÁUSULA INTO e USING

CREATE OR REPLACE FUNCTION NUM_EMPLE(DEPARTAMENTO NUMBER)
RETURN NUMBER
IS  
    COMANDO VARCHAR2(200);
    NUM_EMPLEADOS NUMBER;
BEGIN
    COMANDO:='SELECT COUNT(*) FROM EMPLOYEES WHERE DEPARTMENT_ID=:DEPARTAMENTO';
    EXECUTE IMMEDIATE COMANDO INTO NUM_EMPLEADOS USING DEPARTAMENTO;
    RETURN NUM_EMPLEADOS;
END;
/
    
DECLARE
    DEPART NUMBER;
    EMPLE NUMBER;
BEGIN
    DEPART:=100;
    EMPLE:=NUM_EMPLE(DEPART);
    DBMS_OUTPUT.PUT_LINE('HAY '||EMPLE ||' EMPLEADOS EN EL DEPARTAMENTO '|| DEPART);
END;
/



-- BULK COLLECT

DECLARE 
  -- CREAR UN TIPO
  TYPE EMPLE_TYPE IS RECORD
  (
    NOMBRE_COMPLETO VARCHAR2(100),
    SALARIO NUMBER,
    IMPUESTOS NUMBER
    );
    
  -- CREAR TABLE INDEX TABLE 
  TYPE EMPLEADO IS TABLE OF EMPLE_TYPE INDEX BY PLS_INTEGER;
  
  EMPLEADOS EMPLEADO;
  CONDICION NUMBER;
  COMANDO VARCHAR2(1000);
BEGIN
    CONDICION:=5000;
    COMANDO:=q'[ SELECT FIRST_NAME ||' '|| LAST_NAME,SALARY, SALARY*15/100 FROM EMPLOYEES
               WHERE SALARY> :CONDICION ORDER BY SALARY DESC]';
    EXECUTE IMMEDIATE COMANDO BULK COLLECT INTO EMPLEADOS USING  CONDICION;
    
    FOR X IN 1..EMPLEADOS.COUNT()
    LOOP
        DBMS_OUTPUT.PUT_LINE(EMPLEADOS(X).NOMBRE_COMPLETO||' '||EMPLEADOS(X).SALARIO||' '||EMPLEADOS(X).IMPUESTOS);
    END LOOP;
END;
/


-- OPEN FETCH CLOSE

DECLARE 
  -- CREAR UN TIPO
  TYPE EMPLE_TYPE IS RECORD
  (
    NOMBRE_COMPLETO VARCHAR2(100),
    SALARIO NUMBER,
    IMPUESTOS NUMBER
    );
    
  -- CREAR TABLE INDEX TABLE 
  TYPE EMPLEADO IS TABLE OF EMPLE_TYPE INDEX BY PLS_INTEGER;
  
  EMPLEADOS EMPLEADO;
  CONDICION NUMBER;
  COMANDO VARCHAR2(1000);
  
  --CREAMOS UN REF CURSOR
  TYPE V_CURSOR IS REF CURSOR;
  C1 V_CURSOR;
  
BEGIN
    CONDICION:=5000;
    COMANDO:=q'[ SELECT FIRST_NAME ||' '|| LAST_NAME,SALARY, SALARY*15/100 FROM EMPLOYEES
               WHERE SALARY> :CONDICION ORDER BY SALARY DESC]';
    OPEN C1 FOR COMANDO USING CONDICION;
    FETCH C1 BULK COLLECT INTO EMPLEADOS ;
    
    FOR X IN 1..EMPLEADOS.COUNT()
    LOOP
        DBMS_OUTPUT.PUT_LINE(EMPLEADOS(X).NOMBRE_COMPLETO||' '||EMPLEADOS(X).SALARIO||' '||EMPLEADOS(X).IMPUESTOS);
    END LOOP;
END;
/


-- DBMS_SQL

CREATE OR REPLACE PROCEDURE CREAR_TABLA(TABLA VARCHAR2, COLUMNAS VARCHAR2)
AUTHID CURRENT_USER
IS
    ID_CURSOR INTEGER;
    NUM_FILAS INTEGER;
BEGIN
    ID_CURSOR:=DBMS_SQL.OPEN_CURSOR;
    -- CREATE TABLE T1 ( CODIGO NUMBER )
    DBMS_SQL.PARSE(ID_CURSOR, 'CREATE TABLE '||TABLA||'('||COLUMNAS||')',DBMS_SQL.NATIVE);
    NUM_FILAS:=DBMS_SQL.EXECUTE(ID_CURSOR);
    DBMS_SQL.CLOSE_CURSOR(ID_CURSOR);
    DBMS_OUTPUT.PUT_LINE(NUM_FILAS);
END;
/

BEGIN
    CREAR_TABLA('T1','CODIGO NUMBER, DATOS VARCHAR2(100)');
END;
/

DESC T1;

---------------------------------------------------------
-- BIND_VARIABLE
---------------------------------------------------------

CREATE TABLE REGIONES AS SELECT * FROM REGIONS;
/

SELECT * FROM REGIONES;
/

CREATE OR REPLACE PROCEDURE MOD_COLUMNA(TABLA VARCHAR2,COLUMNA VARCHAR2, VALOR_ANTIGUO VARCHAR2, VALOR_NUEVO VARCHAR2)
AUTHID CURRENT_USER

IS
--VARIABLE PAR5A ALBERGAR EL IDE DEL CURSOR
ID_CURSOR INTEGER;
NUM_FILAS NUMBER;

BEGIN
  ID_CURSOR:=DBMS_SQL.OPEN_CURSOR;
  DBMS_SQL.PARSE(ID_CURSOR,'UPDATE ' ||TABLA ||' SET '||COLUMNA||'=:VALOR_NUEVO WHERE '||COLUMNA||'=:VALOR_ANTIGUO',DBMS_SQL.NATIVE);
  DBMS_SQL.BIND_VARIABLE(ID_CURSOR,':VALOR_ANTIGUO',VALOR_ANTIGUO);
  DBMS_SQL.BIND_VARIABLE(ID_CURSOR,':VALOR_NUEVO',VALOR_NUEVO);

  NUM_FILAS:=DBMS_SQL.EXECUTE(ID_CURSOR);
  DBMS_SQL.CLOSE_CURSOR(ID_CURSOR);
  DBMS_OUTPUT.PUT_LINE(NUM_FILAS||' MODIFICADAS');
END;
/

EXECUTE MOD_COLUMNA('REGIONES','REGION_NAME','Asia','ASIA');

-- BIND ARRAY
--BIND_ARRAY
DECLARE
    ID_CURSOR INTEGER;
    NUM_FILAS INTEGER;

    CODIGOS DBMS_SQL.NUMBER_TABLE;  --
    REGIONES DBMS_SQL.VARCHAR2_TABLE;
BEGIN
    CODIGOS(1):=10;
    CODIGOS(2):=20;
    CODIGOS(3):=30;
    REGIONES(1):='AUSTRALIA';
    REGIONES(2):='ANTARTIDA';
    REGIONES(3):='NUEVA ZELANDA';
    
    ID_CURSOR:=DBMS_SQL.OPEN_CURSOR;
    DBMS_SQL.PARSE(ID_CURSOR, 'INSERT INTO REGIONES VALUES (:COD,:REG)', DBMS_SQL.NATIVE);
    
    DBMS_SQL.BIND_ARRAY(ID_CURSOR,':COD',CODIGOS);
    DBMS_SQL.BIND_ARRAY(ID_CURSOR,':REG',REGIONES);
    
    NUM_FILAS:=DBMS_SQL.EXECUTE(ID_CURSOR);
    DBMS_SQL.CLOSE_CURSOR(ID_CURSOR);
END;
/

SELECT * FROM REGIONES;
     
-- SELECTS

CREATE OR REPLACE FUNCTION BUSCAR_EMPLEADO(CODIGO NUMBER)
RETURN VARCHAR2
IS
    ID_CURSOR INTEGER;
    NUM_FILAS INTEGER;
    NOMBRE VARCHAR2(100);
BEGIN

    ID_CURSOR:=DBMS_SQL.OPEN_CURSOR;
    DBMS_SQL.PARSE(ID_CURSOR, 'SELECT FIRST_NAME,SALARY FROM EMPLOYEES WHERE EMPLOYEE_ID= :COD', DBMS_SQL.NATIVE);
    DBMS_SQL.DEFINE_COLUMN(ID_CURSOR, 1, NOMBRE, 20);
    
    DBMS_SQL.BIND_VARIABLE(ID_CURSOR,':COD',CODIGO);
    
    NUM_FILAS:=DBMS_SQL.EXECUTE(ID_CURSOR);
    IF DBMS_SQL.FETCH_ROWS(ID_CURSOR) = 0 THEN
        RETURN 'NO EXISTE EL EMPLEADO';
    END IF;
    DBMS_SQL.COLUMN_VALUE(ID_CURSOR, 1, NOMBRE);
    DBMS_SQL.CLOSE_CURSOR(ID_CURSOR);
    RETURN NOMBRE;
END;
/


SET SERVEROUTPUT ON
BEGIN
   DBMS_OUTPUT.PUT_LINE(BUSCAR_EMPLEADO(0));
END;



CREATE OR REPLACE PROCEDURE BUSCAR_EMPLEADO1(SALARIO NUMBER)
IS
    ID_CURSOR INTEGER;
    NUM_FILAS INTEGER;
    NOMBRE VARCHAR2(100);
    APELLIDO VARCHAR2(100);
BEGIN

    ID_CURSOR:=DBMS_SQL.OPEN_CURSOR;
    DBMS_SQL.PARSE(ID_CURSOR, 'SELECT FIRST_NAME,LAST_NAME FROM EMPLOYEES WHERE SALARY > :SALARIO', DBMS_SQL.NATIVE);
    DBMS_SQL.DEFINE_COLUMN(ID_CURSOR, 1, NOMBRE, 20);
    DBMS_SQL.DEFINE_COLUMN(ID_CURSOR, 2, APELLIDO, 20);
    
    DBMS_SQL.BIND_VARIABLE(ID_CURSOR,':SALARIO',SALARIO);
    
    NUM_FILAS:=DBMS_SQL.EXECUTE(ID_CURSOR);
    
    LOOP
        IF DBMS_SQL.FETCH_ROWS(ID_CURSOR) = 0 THEN
            EXIT;
        END IF;
    
        DBMS_SQL.COLUMN_VALUE(ID_CURSOR, 1, NOMBRE);
        DBMS_SQL.COLUMN_VALUE(ID_CURSOR, 2, APELLIDO);
        DBMS_OUTPUT.PUT_LINE('NOMBRE:'||NOMBRE||' Y EL APELLIDO ES '||APELLIDO);
    END LOOP;
        
    DBMS_SQL.CLOSE_CURSOR(ID_CURSOR);
END;
/


SET SERVEROUTPUT ON
BEGIN
   BUSCAR_EMPLEADO1(5000);
END;